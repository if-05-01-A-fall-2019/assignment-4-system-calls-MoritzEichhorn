System Calls Understanding

fork: creates a new process(child process) by duplicating the calling process (parent process).
Arguments: no arguments

stat: Display file or file system status.
Arguments: 
const char *pathname: The path to the file you want the information from.
struct stat *statbuf: The return buffer

kill: Sends a singal to a process
Arguments:
pid_t pid: ID of the process you want to send the signal to.
int sig: signal you want to send

mmap: creates a new mapping in the virtual address space of the calling process
Arguments:
void *addr: Is the starting addres for the new mapping
site_t length: Specifies the length of the mapping (must be greater than 0)
int prot: Describes the desired memory protection of the mapping
int flags: determines whether updates to the mapping are visible to other processes mapping the same region, and whether updates are carried through to the underlying file.
int fd: Is the file descriptor
off_t offset: Is the starting offset in the file

chmod: Changes a files mode bits.
Arguments:
const char *pathname: The path to the file you want to change the mode of.
mode_t mode: New file mode

waitpid: Waits for process to change state
Arguments: 
pid_t pid: child that waitpid() waits for to change state
int *wstatus: if not NULL: status infomration is stored in the int to which it points.
int options: By default, waitpid() waits only for terminated children, but this behavior
is modifiable via the options argument


System Calls Fails

fork: Fails to allocate the necessary kernel structures when memory is tight.

exec: Fails when execute permission is denied for the file or a script or ELF interpreter.

unlink: Fails when pathname points outside you accessible address space.

read: Fails when fd is not a valid file descriptor or is not open for reading.

mount: Fails when a component of a path is not searchable.

chmod: Fails when the file does not exist

kill: Fails when the process does not have permission to send the signal to any of the
target processes.


Traps instrucion:
is a procedure call that transfers the control. It is a software interrupt generated by an error or the user program when the OS is needed to perform system calls or an operation.
So a trap instrucion is used to switch from user mode to the kernel mode.
